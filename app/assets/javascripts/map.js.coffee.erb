# Place all the behaviors and hooks related to the matching controller here.
# All this logic will automatically be available in application.js.
# You can use CoffeeScript in this file: http://jashkenas.github.com/coffee-script/
class @VectorFeed
  constructor: (url, map, source_proj, dest_proj) ->
    @map = map
    @url = url
    @builder = new StyleBuilder()
    
    if source_proj != dest_proj
      @do_transform = true
      @source = new OpenLayers.Projection(source_proj)
      @dest = new OpenLayers.Projection(dest_proj)
    #end if
  #end constructor
      
  transform: (features) ->
    for f in features
      f.geometry.transform(@source, @dest)  
      f 
    #end for
  #end transform
  
  geojson: (data) ->
    parser = new OpenLayers.Format.GeoJSON()
    if data.geojson
      features = parser.read(data.geojson)    
    else if data.type && data.type == 'FeatureCollection'
      features = parser.read(data)    
    #end
    
    if @do_transform == true
      features = @transform(features)
    
    features
  #end geojson
  
  gpx: (data) ->
    parser = new OpenLayers.Format.GPX()
    features = parser.read(data)    
    
    if @do_transform == true
      features = @transform(features)
    
    features    
  #end gps
  
  parseFeatures: (data) ->
    if data.geojson
      type = 'geojson'
    else if data.gpx
      type = 'gpx'
    else
      # assume geojson as default
      type = 'geojson'
    #end if
    
    switch type
      when 'geojson'
        return @geojson(data)
      when 'gpx'
        return @gpx(data.gpx)
    #end switch
  #end parseFeatures
  
  buildLayer: (data) ->
    config = {}
    if data.style || data.rules
      config.styleMap = @builder.build(data.style, data.rules)
    #end if
    
    features = @parseFeatures(data)
    
    # strats = new StratBuilder()
    # 
    # dateFilter = strats.date('start_time', Date.parse('2012/06/21'), Date.parse('2012/06/21 23:59:59'), features);
    # config.strategies = [strats.build(dateFilter)];
    # 
    layer = new OpenLayers.Layer.Vector(data.name || 'Vector', config)
    @map.addLayer(layer)
    
    layer.addFeatures(features)
    layer
  #end buildLayer
  
  fetch: () ->
    $.get @url, (data) =>      
      @buildLayer(data)
    #end get
  #end fetch
#end VectorFeed